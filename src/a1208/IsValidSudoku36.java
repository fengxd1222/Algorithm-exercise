package a1208;

/**
 * 请你判断一个 9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 *
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 *
 *
 * 注意：
 *
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 空白格用 '.' 表示。
 *
 *输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 *
 */
public class IsValidSudoku36 {

    public static boolean isValidSudoku(char[][] board) {
        //创建行的验证表 row[i][number] 解释下含义，i是第几行，范围0-8，number是出现的具体数字，范围是1-9
        // 至于为什么长度是10，因为起始是0，而实际数独中没有0.实在是懒得在程序里对数字减一处理了
        //具体含义就是数独中第i行的数字是否出现过
        boolean[][] row = new boolean[9][10];
        //列验证表
        boolean[][] col = new boolean[9][10];
        //3*3宫格看作一个个的桶,一共9个桶，所以长度是9,桶编号0-8
        boolean[][] bucket = new boolean[9][10];

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if(board[i][j]!='.'){
                    //证明是数字
                    int number = board[i][j] - '0';
                    //计算桶的位置
                    int bucketIndex = i/3*3+j/3;
                    //判断当前位置的数字是否已经在行、列、桶中出现过
                    if(row[i][number] || col[j][number] || bucket[bucketIndex][number]){
                        return false;
                    }
                    row[i][number] = true;
                    col[j][number] = true;
                    bucket[bucketIndex][number] = true;
                }
            }
        }
        return true;
    }
}
